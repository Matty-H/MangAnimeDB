generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model License {
  id               String            @id @default(cuid())
  externalId       String?           @unique
  title            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  animeAdaptations AnimeAdaptation[] @relation("AnimeAdaptationToLicense")
  mangaParts       MangaPart[]       @relation("LicenseToMangaPart")
  mangas           MangaWork[]       @relation("LicenseToManga")

  @@map("licenses")
}

model MangaWork {
  id          String         @id @default(cuid())
  externalId  String?        @unique
  licenseId   String
  title       String
  authors     String[]
  volumes     Int
  status      WorkStatus
  startDate   DateTime?
  endDate     DateTime?
  publisher   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  parts       MangaPart[]    @relation("MangaWorkToParts")
  adaptations MangaToAnime[] @relation("MangaToMangaToAnime")
  license     License        @relation("LicenseToManga", fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([title])
  @@map("mangas")
}

model MangaPart {
  id          String             @id @default(cuid())
  externalId  String?            @unique
  mangaId     String
  licenseId   String
  title       String
  partNumber  Int
  volumes     Int
  startVolume Int
  endVolume   Int
  status      WorkStatus
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  adaptations MangaPartToAnime[] @relation("MangaPartToAnime")
  license     License            @relation("LicenseToMangaPart", fields: [licenseId], references: [id], onDelete: Cascade)
  manga       MangaWork          @relation("MangaWorkToParts", fields: [mangaId], references: [id], onDelete: Cascade)

  @@map("manga_parts")
}

model AnimeAdaptation {
  id              String             @id @default(cuid())
  externalId      String?            @unique
  licenseId       String
  title           String
  studio          String
  episodes        Int?
  startDate       DateTime?
  endDate         DateTime?
  status          WorkStatus
  fidelity        AnimeFidelity
  notes           String?
  relationType    RelationType
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  adaptationType  AdaptationType
  duration        Int?
  license         License            @relation("AnimeAdaptationToLicense", fields: [licenseId], references: [id], onDelete: Cascade)
  seasons         AnimeSeason[]      @relation("AnimeAdaptationToAnimeSeason")
  partSourcedFrom MangaPartToAnime[] @relation("AnimeAdaptationToMangaPartToAnime")
  sourcedFrom     MangaToAnime[]     @relation("AnimeAdaptationToMangaToAnime")

  @@map("anime_adaptations")
}

model MangaToAnime {
  id                 String          @id @default(cuid())
  mangaId            String
  animeAdaptationId  String
  coverageFromVolume Int?
  coverageToVolume   Int?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  anime_name         AnimeAdaptation @relation("AnimeAdaptationToMangaToAnime", fields: [animeAdaptationId], references: [id], onDelete: Cascade)
  manga_name         MangaWork       @relation("MangaToMangaToAnime", fields: [mangaId], references: [id], onDelete: Cascade)

  @@map("manga_to_anime")
}

model MangaPartToAnime {
  id                String          @id @default(cuid())
  mangaPartId       String
  animeAdaptationId String
  coverageComplete  Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  animeAdaptation   AnimeAdaptation @relation("AnimeAdaptationToMangaPartToAnime", fields: [animeAdaptationId], references: [id], onDelete: Cascade)
  mangaPart         MangaPart       @relation("MangaPartToAnime", fields: [mangaPartId], references: [id], onDelete: Cascade)

  @@map("manga_part_to_anime")
}

model AnimeSeason {
  id                 String          @id @default(cuid())
  animeAdaptationId  String
  seasonNumber       Int
  episodes           Int
  fidelity           AnimeFidelity
  coverageFromVolume Int?
  coverageToVolume   Int?
  notes              String?
  relationType       RelationType?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  animeAdaptation    AnimeAdaptation @relation("AnimeAdaptationToAnimeSeason", fields: [animeAdaptationId], references: [id], onDelete: Cascade)

  @@map("anime_seasons")
}

enum WorkStatus {
  ONGOING
  COMPLETED
  HIATUS
  UNFINISHED
  CANCELED
}

enum AnimeFidelity {
  FAITHFUL
  PARTIAL
  ANIME_ORIGINAL
}

enum RelationType {
  ORIGINAL
  SEQUEL
  PREQUEL
  REMAKE
  SPIN_OFF
  REBOOT
  MANGA_ADAPTATION
}

enum AdaptationType {
  TV_SERIES
  MOVIE
  OVA
  ONA
  SPECIAL
}
